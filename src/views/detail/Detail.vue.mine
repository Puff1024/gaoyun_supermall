<template>
  <div id="detail">
    <detail-nav-bar
      class="detail-nav"
      @itemClick="titleClick"
      :probe-type="3"
      ref="nav"
    ></detail-nav-bar>
    <scroll
      class="content"
      ref="scroll"
      @show-back="contentScroll"
      :probe-type="3"
    >
      <detail-swiper :topImages="topImages" ref="base"></detail-swiper>
      <detail-base-info :goods="goods"></detail-base-info>
      <detail-shop-info :shop="shop"></detail-shop-info>
      <detail-goods-info
        :detailInfo="detailInfo"
        @imageLoad="imageLoad"
      ></detail-goods-info>
      <detail-param-info :paramInfo="paramInfo" ref="param"></detail-param-info>
      <detail-comment-info
        :commentInfo="commentInfo"
        ref="comment"
      ></detail-comment-info>
      <detail-recommend-info
        :recommendList="recommendList"
        ref="recommend"
      ></detail-recommend-info>
    </scroll>
    <back-top @click.native="backClick" v-show="isShowBack"></back-top>
  </div>
</template>

<script>
import DetailNavBar from "./childComps/DetailNavBar.vue";
import DetailSwiper from "./childComps/DetailSwiper.vue";
import DetailBaseInfo from "./childComps/DetailBaseInfo.vue";
import DetailShopInfo from "./childComps/DetailShopInfo.vue";
import DetailGoodsInfo from "./childComps/DetailGoodsInfo.vue";
import DetailParamInfo from "./childComps/DetailParamInfo.vue";
import DetailCommentInfo from "./childComps/DetailCommentInfo.vue";
import DetailRecommendInfo from "./childComps/DetailRecommendInfo.vue";
import BackTop from "components/content/backTop/BackTop.vue";
import Scroll from "components/common/scroll/Scroll";
import {
  getDetail,
  getRecommend,
  Goods,
  Shop,
  GoodsParam
} from "network/detail.js";
import { debounce } from "@/common/utils";
export default {
  name: "Detail",
  components: {
    DetailNavBar,
    DetailSwiper,
    DetailBaseInfo,
    DetailShopInfo,
    DetailGoodsInfo,
    DetailParamInfo,
    DetailCommentInfo,
    DetailRecommendInfo,
    BackTop,
    Scroll
  },
  data() {
    return {
      iid: null,
      topImages: [],
      goods: {},
      shop: {},
      detailInfo: {},
      paramInfo: {},
      commentInfo: {},
      recommendList: [],
      themeTops: [],
      isShowBack: false,
      currentIndex: 0,
      themeTopYs: [],
      getThemeTopY: null
    };
  },
  created() {
    //获取商品的iid
    this.iid = this.$route.params.iid;
    // console.log(this.$route.params);
    //获取轮播图数据
    this.res = getDetail(this.iid).then(res => {
      // 1.获取顶部的图片轮播数据
      // console.log(res);
      const data = res.result;
      this.topImages = data.itemInfo.topImages;

      // 2.获取商品信息
      this.goods = new Goods(
        data.itemInfo,
        data.columns,
        data.shopInfo.services
      );

      // 3.创建店铺信息的对象
      this.shop = new Shop(data.shopInfo);

      // 4.保存商品的详情数据
      this.detailInfo = data.detailInfo;

      // 5.获取参数的信息
      this.paramInfo = new GoodsParam(
        data.itemParams.info,
        data.itemParams.rule
      );

      //6.取出评论的信息
      if (data.rate.list) {
        this.commentInfo = data.rate.list[0];
      }
    });
    getRecommend().then(res => {
      this.recommendList = res.data.list;
      //  console.log(this.recommendList);
    });
  },

  methods: {
    imageLoad() {
      this.$refs.scroll.refresh();
      this.getOffsetTops();
    },
    titleClick(index) {
      this.$refs.scroll.scrollTo(0, -this.themeTops[index] + 44, 100);
    },
    getOffsetTops() {
      this.themeTops = [];
      this.themeTops.push(this.$refs.base.$el.offsetTop);
      this.themeTops.push(this.$refs.param.$el.offsetTop);
      this.themeTops.push(this.$refs.comment.$el.offsetTop);
      this.themeTops.push(this.$refs.recommend.$el.offsetTop);
      // this.themeTops.push(Number.MAX_VALUE);
    },
    backClick() {
      this.$refs.scroll.scrollTo(0, 0);
    },
    contentScroll(position) {
      //判断位置显示回到顶部按钮
      this.isShowBack = -position.y > 1000;
      // console.log(position);
      const positionY = -position.y;
      // console.log(this.themeTops);
      let length = this.themeTopYs.length;
      for (let i = 0; i < length; i++) {
        if (
          this.currentIndex !== i &&
          ((i < length - 1 &&
            positionY >= this.themeTopYs[i] &&
            positionY < this.themeTopYs[i + 1]) ||
            (i === length - 1 && positionY >= this.themeTopYs[i]))
        ) {
          this.currentIndex = i;
          this.$refs.nav.currentIndex = this.currentIndex;
          console.log(i);
          // this.listenScrollTheme(position);
        }
        // listenScrollTheme(position) {
        //   const positionY = -position.y
        //   let length = -this.themeTopYs.length
        //   for(let i = 0; i < length; i++) {
        //     if(this.currentIndex != i || ((i < length -1 && positionY > this.themeTopYs[i] && this.themeTopYs[i+1]) || (i ===
        //     length -1 && positionY > this.themeTopYs[i]))) {
        //       this.currentIndex = i;
        //       console.log(this.currentIndex);
        //     }
        //   }
        // }
        // listenScrollTheme(position) {

        //     let length = this.themeTops.length;
        //     for (let i = 0; i < length; i++) {
        //       let iPos = this.themeTops[i];
        //       /**
        //        * 判断的方案:
        //        *  方案一:
        //        *    条件: (i < (length-1) && currentPos >= iPos && currentPos < this.themeTops[i+1]) || (i === (length-1) && currentPos >= iPos),
        //        *    优点: 不需要引入其他的内容, 通过逻辑解决
        //        *    缺点: 判断条件过长, 并且不容易理解
        //        *  方案二:
        //        *    条件: 给themeTops最后添加一个很大的值, 用于和最后一个主题的top进行比较.
        //        *    优点: 简洁明了, 便于理解
        //        *    缺点: 需要引入一个较大的int数字
        //        * 疑惑: 在第一个判断中, 为什么不能直接判断(currentPos >= iPos)即可?
        //        * 解答: 比如在某一个currentPos大于第0个时, 就会break, 不会判断后面的i了.
        //        */
        //       if (position >= iPos && position < this.themeTops[i+1]) {
        //         if (this.currentIndex !== i) {
        //           this.currentIndex = i;

        //         }
        //         break;
        //       }
        //     }
        //   }
      }
    }
  }
};
</script>

<style scoped>
#detail {
  position: relative;
  z-index: 9;
  height: 100vh;
  background-color: #fff;
}
.detail-nav {
  position: relative;
  z-index: 9;
  background-color: #fff;
}
.content {
  height: calc(100% - 44px);
}
</style>
